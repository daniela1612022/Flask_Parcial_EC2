name: Deploy Backend Flask

on:
  push:
    branches: [ main ]

jobs:
  Deploy:
    name: Deploy to EC2 for Backend Flask
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Chequear el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Paso 3: Desplegar en la instancia EC2
      - name: Deploy to EC2 Instance
        env:
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Clave SSH privada almacenada en GitHub Secrets
          SERVER_IP: ${{ secrets.SSH_HOST }}                # IP pública de tu instancia EC2
          EC2_USER: ${{ secrets.USER_NAME }}                # Usuario EC2 (ej. ubuntu)
          APP_DIR: /home/ubuntu/mi_proyecto_flask           # Ruta de tu backend Flask en EC2
          APP_FILE: app.py                                  # Archivo principal de tu aplicación
          ENVIRONMENT: production                           # Configuración del entorno (opcional)
      
        run: |
          # Guardar la clave privada en un archivo temporal
          echo "$EC2_PRIVATE_KEY" > ec2_key && chmod 400 ec2_key
          
          # Conectarse a la instancia EC2 y realizar el despliegue
          ssh -o StrictHostKeyChecking=no -i ec2_key ${EC2_USER}@${SERVER_IP} '
              # Acceder al directorio del proyecto
              cd $APP_DIR &&
              
              # Verificar si el entorno virtual existe, de lo contrario crearlo
              if [ -d "venv" ]; then
                  source venv/bin/activate
              else
                  python3 -m venv venv
                  source venv/bin/activate
              fi &&

              # Actualizar el código desde la rama main
              git fetch --all &&
              git reset --hard origin/main &&
              git pull origin main &&

              # Instalar dependencias necesarias
              pip install -r requirements.txt &&

              # Detener cualquier proceso en el puerto 5000
              lsof -t -i:5000 | xargs kill -9 || true &&

              # Ejecutar la aplicación Flask en segundo plano
              nohup flask run --host=0.0.0.0 --port=5000 &

              # Desactivar el entorno virtual
              deactivate
              '
